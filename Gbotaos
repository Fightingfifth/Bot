-- Initialize local variables
local LatestGameState = nil
local Game = "tm1jYBC0F2gTZ0EuUQKq5q_esxITDFkAG6QEpLbpI9I"

-- ANSI color codes for text formatting
local colors = {
    red = "\27[31m",
    green = "\27[32m",
    blue = "\27[34m",
    reset = "\27[0m"
}

-- Check if two points are within a specified range
local function inRange(x1, y1, x2, y2, range)
    return math.abs(x1 - x2) <= range and math.abs(y1 - y2) <= range
end

-- Calculate Euclidean distance between two points
local function calcDistance(x1, y1, x2, y2)
    return math.sqrt((x2 - x1)^2 + (y2 - y1)^2)
end

-- Determine direction from source to target
local function selectDirection(source, target)
    local yDirection = (target.y < source.y) and "Up" or (target.y > source.y) and "Down" or ""
    local xDirection = (target.x < source.x) and "Left" or (target.x > source.x) and "Right" or ""
    return yDirection .. xDirection
end

-- Decide next action based on game state
local function decideNextAction()
    local player = LatestGameState.Players[ao.id]
    local targetPlayer = nil
    local fleeThreshold = 0.7

    for target, state in pairs(LatestGameState.Players) do
        if target ~= ao.id then
            if state.health < player.health and state.energy < player.energy then
                targetPlayer = state
                break
            end
        end
    end

    if targetPlayer then
        local shouldFight = (targetPlayer.energy / targetPlayer.maxEnergy < fleeThreshold) and
                            (targetPlayer.health / targetPlayer.maxHealth < fleeThreshold)

        if shouldFight then
            print(colors.red .. "Engaging opponent." .. colors.reset)
            ao.send({ Target = Game, Action = "PlayerAttack", AttackEnergy = tostring(player.energy) })
        else
            print(colors.blue .. "Fleeing from opponent." .. colors.reset)
            -- Implement fleeing strategy
        end
    else
        print(colors.green .. "No opponent found." .. colors.reset)
    end
end

-- Send request to get game state
local function sendGetGameStateEvent()
    ao.send({ Target = Game, Action = "GetGameState" })
end

-- Handle game announcements and trigger updates
local function handleAnnouncements(msg)
    if msg.Event == "Started-Waiting-Period" then
        print("Auto-paying confirmation fees.")
        ao.send({ Target = Game, Action = "Transfer", Recipient = Game, Quantity = "1000" })
    elseif msg.Event == "Tick" or msg.Event == "Started-Game" then
        sendGetGameStateEvent()
    end
    print(colors.green .. msg.Event .. ": " .. msg.Data .. colors.reset)
end

-- Update game state upon receiving new information
local function updateGameState(msg)
    local json = require("json")
    LatestGameState = json.decode(msg.Data)
    print("Deciding next action.")
    decideNextAction()
    sendGetGameStateEvent()
    print(json.encode(LatestGameState)) -- Print encoded game state for debugging
end

-- Automatically attack when hit by another player
local function returnAttack(msg)
    local playerEnergy = LatestGameState.Players[ao.id].energy
    if not playerEnergy or playerEnergy == 0 then
        print(colors.red .. "Unable to perform attack: Insufficient energy." .. colors.reset)
        ao.send({ Target = Game, Action = "Attack-Failed", Reason = "Insufficient energy." })
    else
        print(colors.red .. "Returning attack." .. colors.reset)
        ao.send({ Target = Game, Action = "PlayerAttack", AttackEnergy = tostring(playerEnergy) })
    end
    ao.send({ Target = ao.id, Action = "Tick" })
end

-- Add handlers for specific game events
Handlers.add("PrintAnnouncements", Handlers.utils.hasMatchingTag("Action", "Announcement"), handleAnnouncements)
Handlers.add("UpdateGameState", Handlers.utils.hasMatchingTag("Action", "GameState"), updateGameState)
Handlers.add("ReturnAttack", Handlers.utils.hasMatchingTag("Action", "Hit"), returnAttack)
